
timer_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800200  00000296  0000032a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000296  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800204  00800204  0000032e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000032e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000360  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e11  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cb6  00000000  00000000  000011e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000357  00000000  00000000  00001e9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  000021f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005df  00000000  00000000  000022a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000166  00000000  00000000  00002883  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000029e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	a6 c0       	rjmp	.+332    	; 0x192 <__vector_17>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 e9       	ldi	r30, 0x96	; 150
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 30       	cpi	r26, 0x04	; 4
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a4 e0       	ldi	r26, 0x04	; 4
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a8 30       	cpi	r26, 0x08	; 8
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	1f d0       	rcall	.+62     	; 0x15e <main>
 120:	b8 c0       	rjmp	.+368    	; 0x292 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <_Z14UART0_TRANSMITPc>:
int i;


int num_ladiesbafu;
int count;
void UART0_TRANSMIT(char* data){
 124:	fc 01       	movw	r30, r24
	while(*data){
 126:	80 81       	ld	r24, Z
 128:	88 23       	and	r24, r24
 12a:	41 f0       	breq	.+16     	; 0x13c <_Z14UART0_TRANSMITPc+0x18>
		while(!(UCSR0A & (1<<UDRE0))){}
 12c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 130:	95 ff       	sbrs	r25, 5
 132:	fc cf       	rjmp	.-8      	; 0x12c <_Z14UART0_TRANSMITPc+0x8>
		UDR0=*data;
 134:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
		data++;
 138:	31 96       	adiw	r30, 0x01	; 1


int num_ladiesbafu;
int count;
void UART0_TRANSMIT(char* data){
	while(*data){
 13a:	f5 cf       	rjmp	.-22     	; 0x126 <_Z14UART0_TRANSMITPc+0x2>
 13c:	08 95       	ret

0000013e <_Z11UART0_BEGINv>:
		data++;
	}
}
void UART0_BEGIN()
{
	UBRR0H=0;
 13e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UBRR0L=103;
 142:	87 e6       	ldi	r24, 0x67	; 103
 144:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	UCSR0B|=(1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
 148:	e1 ec       	ldi	r30, 0xC1	; 193
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	88 69       	ori	r24, 0x98	; 152
 150:	80 83       	st	Z, r24
	UCSR0C|=(1<<UCSZ00)|(1<<UCSZ01);
 152:	e2 ec       	ldi	r30, 0xC2	; 194
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	86 60       	ori	r24, 0x06	; 6
 15a:	80 83       	st	Z, r24
 15c:	08 95       	ret

0000015e <main>:
}

int main(void)
{
	UART0_BEGIN();
 15e:	ef df       	rcall	.-34     	; 0x13e <_Z11UART0_BEGINv>
	TCNT1=0;//initialize the counter value to zero
 160:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 164:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	//OCR1AL=64;//15625*1024=16MHz //output compare register low
	//OCR1AH=64>>8; // output compare register high
	OCR1A = 15625;
 168:	89 e0       	ldi	r24, 0x09	; 9
 16a:	9d e3       	ldi	r25, 0x3D	; 61
 16c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 170:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
	TCCR1B |= (1 << WGM12);
 174:	e1 e8       	ldi	r30, 0x81	; 129
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	88 60       	ori	r24, 0x08	; 8
 17c:	80 83       	st	Z, r24
	// Set to CTC Mode
	TIMSK1 |= (1 << OCIE1A);
 17e:	af e6       	ldi	r26, 0x6F	; 111
 180:	b0 e0       	ldi	r27, 0x00	; 0
 182:	8c 91       	ld	r24, X
 184:	82 60       	ori	r24, 0x02	; 2
 186:	8c 93       	st	X, r24
	//Set interrupt on compare match
	TCCR1B |= (1 << CS12)|(1<<CS10);
 188:	80 81       	ld	r24, Z
 18a:	85 60       	ori	r24, 0x05	; 5
 18c:	80 83       	st	Z, r24
	// set prescaler to 1024 and starts PWM=the higher the prescaler the higher the precision
	sei();
 18e:	78 94       	sei
 190:	ff cf       	rjmp	.-2      	; 0x190 <main+0x32>

00000192 <__vector_17>:
		
	}
}

ISR (TIMER1_COMPA_vect)
{
 192:	1f 92       	push	r1
 194:	0f 92       	push	r0
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	0f 92       	push	r0
 19a:	11 24       	eor	r1, r1
 19c:	0b b6       	in	r0, 0x3b	; 59
 19e:	0f 92       	push	r0
 1a0:	2f 93       	push	r18
 1a2:	3f 93       	push	r19
 1a4:	4f 93       	push	r20
 1a6:	5f 93       	push	r21
 1a8:	6f 93       	push	r22
 1aa:	7f 93       	push	r23
 1ac:	8f 93       	push	r24
 1ae:	9f 93       	push	r25
 1b0:	af 93       	push	r26
 1b2:	bf 93       	push	r27
 1b4:	ef 93       	push	r30
 1b6:	ff 93       	push	r31
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
 1bc:	cd b7       	in	r28, 0x3d	; 61
 1be:	de b7       	in	r29, 0x3e	; 62
 1c0:	2a 97       	sbiw	r28, 0x0a	; 10
 1c2:	de bf       	out	0x3e, r29	; 62
 1c4:	cd bf       	out	0x3d, r28	; 61
		count++;
 1c6:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <__data_end>
 1ca:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <__data_end+0x1>
 1ce:	01 96       	adiw	r24, 0x01	; 1
		num_ladiesbafu=count;
 1d0:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <num_ladiesbafu+0x1>
 1d4:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <num_ladiesbafu>
		count=0;
 1d8:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <__data_end+0x1>
 1dc:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <__data_end>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 1e0:	4a e0       	ldi	r20, 0x0A	; 10
 1e2:	be 01       	movw	r22, r28
 1e4:	6f 5f       	subi	r22, 0xFF	; 255
 1e6:	7f 4f       	sbci	r23, 0xFF	; 255
 1e8:	21 d0       	rcall	.+66     	; 0x22c <__itoa_ncheck>
		
		char ch3[10];
		itoa(num_ladiesbafu,ch3,10);
		
		UART0_TRANSMIT(ch3);
 1ea:	ce 01       	movw	r24, r28
 1ec:	01 96       	adiw	r24, 0x01	; 1
 1ee:	9a df       	rcall	.-204    	; 0x124 <_Z14UART0_TRANSMITPc>
		UART0_TRANSMIT("\r\n");	
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	92 e0       	ldi	r25, 0x02	; 2
 1f4:	97 df       	rcall	.-210    	; 0x124 <_Z14UART0_TRANSMITPc>
}
 1f6:	2a 96       	adiw	r28, 0x0a	; 10
 1f8:	0f b6       	in	r0, 0x3f	; 63
 1fa:	f8 94       	cli
 1fc:	de bf       	out	0x3e, r29	; 62
 1fe:	0f be       	out	0x3f, r0	; 63
 200:	cd bf       	out	0x3d, r28	; 61
 202:	df 91       	pop	r29
 204:	cf 91       	pop	r28
 206:	ff 91       	pop	r31
 208:	ef 91       	pop	r30
 20a:	bf 91       	pop	r27
 20c:	af 91       	pop	r26
 20e:	9f 91       	pop	r25
 210:	8f 91       	pop	r24
 212:	7f 91       	pop	r23
 214:	6f 91       	pop	r22
 216:	5f 91       	pop	r21
 218:	4f 91       	pop	r20
 21a:	3f 91       	pop	r19
 21c:	2f 91       	pop	r18
 21e:	0f 90       	pop	r0
 220:	0b be       	out	0x3b, r0	; 59
 222:	0f 90       	pop	r0
 224:	0f be       	out	0x3f, r0	; 63
 226:	0f 90       	pop	r0
 228:	1f 90       	pop	r1
 22a:	18 95       	reti

0000022c <__itoa_ncheck>:
 22c:	bb 27       	eor	r27, r27
 22e:	4a 30       	cpi	r20, 0x0A	; 10
 230:	31 f4       	brne	.+12     	; 0x23e <__itoa_ncheck+0x12>
 232:	99 23       	and	r25, r25
 234:	22 f4       	brpl	.+8      	; 0x23e <__itoa_ncheck+0x12>
 236:	bd e2       	ldi	r27, 0x2D	; 45
 238:	90 95       	com	r25
 23a:	81 95       	neg	r24
 23c:	9f 4f       	sbci	r25, 0xFF	; 255
 23e:	01 c0       	rjmp	.+2      	; 0x242 <__utoa_common>

00000240 <__utoa_ncheck>:
 240:	bb 27       	eor	r27, r27

00000242 <__utoa_common>:
 242:	fb 01       	movw	r30, r22
 244:	55 27       	eor	r21, r21
 246:	aa 27       	eor	r26, r26
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	aa 1f       	adc	r26, r26
 24e:	a4 17       	cp	r26, r20
 250:	10 f0       	brcs	.+4      	; 0x256 <__utoa_common+0x14>
 252:	a4 1b       	sub	r26, r20
 254:	83 95       	inc	r24
 256:	50 51       	subi	r21, 0x10	; 16
 258:	b9 f7       	brne	.-18     	; 0x248 <__utoa_common+0x6>
 25a:	a0 5d       	subi	r26, 0xD0	; 208
 25c:	aa 33       	cpi	r26, 0x3A	; 58
 25e:	08 f0       	brcs	.+2      	; 0x262 <__utoa_common+0x20>
 260:	a9 5d       	subi	r26, 0xD9	; 217
 262:	a1 93       	st	Z+, r26
 264:	00 97       	sbiw	r24, 0x00	; 0
 266:	79 f7       	brne	.-34     	; 0x246 <__utoa_common+0x4>
 268:	b1 11       	cpse	r27, r1
 26a:	b1 93       	st	Z+, r27
 26c:	11 92       	st	Z+, r1
 26e:	cb 01       	movw	r24, r22
 270:	00 c0       	rjmp	.+0      	; 0x272 <strrev>

00000272 <strrev>:
 272:	dc 01       	movw	r26, r24
 274:	fc 01       	movw	r30, r24
 276:	67 2f       	mov	r22, r23
 278:	71 91       	ld	r23, Z+
 27a:	77 23       	and	r23, r23
 27c:	e1 f7       	brne	.-8      	; 0x276 <strrev+0x4>
 27e:	32 97       	sbiw	r30, 0x02	; 2
 280:	04 c0       	rjmp	.+8      	; 0x28a <strrev+0x18>
 282:	7c 91       	ld	r23, X
 284:	6d 93       	st	X+, r22
 286:	70 83       	st	Z, r23
 288:	62 91       	ld	r22, -Z
 28a:	ae 17       	cp	r26, r30
 28c:	bf 07       	cpc	r27, r31
 28e:	c8 f3       	brcs	.-14     	; 0x282 <strrev+0x10>
 290:	08 95       	ret

00000292 <_exit>:
 292:	f8 94       	cli

00000294 <__stop_program>:
 294:	ff cf       	rjmp	.-2      	; 0x294 <__stop_program>
