
IR_WITH_FLOWMETER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000036a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000020d  00800200  00800200  0000036a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000036a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000039c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010ef  00000000  00000000  0000044c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000caa  00000000  00000000  0000153b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000052c  00000000  00000000  000021e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  00002714  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000769  00000000  00000000  00002844  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001fd  00000000  00000000  00002fad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000031aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	47 c1       	rjmp	.+654    	; 0x298 <__vector_2>
   a:	00 00       	nop
   c:	5c c1       	rjmp	.+696    	; 0x2c6 <__vector_3>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	cb c0       	rjmp	.+406    	; 0x1fc <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	dc c0       	rjmp	.+440    	; 0x24a <__vector_36>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 ef       	ldi	r30, 0xF6	; 246
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	24 e0       	ldi	r18, 0x04	; 4
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ad 30       	cpi	r26, 0x0D	; 13
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	22 d0       	rcall	.+68     	; 0x164 <main>
 120:	e8 c0       	rjmp	.+464    	; 0x2f2 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <_Z11UART0_BEGINv>:
{
	for (position1=0;position1<256;position1++)
	{
		buffer1[position1]=0x00;
	}
	position1=0;
 124:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 128:	87 e6       	ldi	r24, 0x67	; 103
 12a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 12e:	e1 ec       	ldi	r30, 0xC1	; 193
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	88 69       	ori	r24, 0x98	; 152
 136:	80 83       	st	Z, r24
 138:	e2 ec       	ldi	r30, 0xC2	; 194
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	86 60       	ori	r24, 0x06	; 6
 140:	80 83       	st	Z, r24
 142:	08 95       	ret

00000144 <_Z11UART1_BEGINv>:
 144:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
 148:	87 e6       	ldi	r24, 0x67	; 103
 14a:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
 14e:	e9 ec       	ldi	r30, 0xC9	; 201
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	88 69       	ori	r24, 0x98	; 152
 156:	80 83       	st	Z, r24
 158:	ea ec       	ldi	r30, 0xCA	; 202
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	86 60       	ori	r24, 0x06	; 6
 160:	80 83       	st	Z, r24
 162:	08 95       	ret

00000164 <main>:
}


int main(void)
{
	UART0_BEGIN();
 164:	df df       	rcall	.-66     	; 0x124 <_Z11UART0_BEGINv>
	UART1_BEGIN();
 166:	ee df       	rcall	.-36     	; 0x144 <_Z11UART1_BEGINv>
 168:	8d b3       	in	r24, 0x1d	; 29
	EIMSK|=(1<<INT0);//external interrupt request 0 enable
 16a:	81 60       	ori	r24, 0x01	; 1
 16c:	8d bb       	out	0x1d, r24	; 29
 16e:	e9 e6       	ldi	r30, 0x69	; 105
	EICRA|=(1<<ISC01)|(0<<ISC00);//trigger INTO 0n falling edge. Interrupt 0 sense control
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	82 60       	ori	r24, 0x02	; 2
 176:	80 83       	st	Z, r24
 178:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
	door_closed=false;
 17c:	78 94       	sei
	sei();
 17e:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <i+0x1>
	while (1)
	{
		for(i=0; i<60; i++)
 182:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <i>
 186:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <i>
 18a:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <i+0x1>
 18e:	cc 97       	sbiw	r24, 0x3c	; 60
 190:	9c f4       	brge	.+38     	; 0x1b8 <main+0x54>
 192:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 194:	83 ed       	ldi	r24, 0xD3	; 211
 196:	90 e3       	ldi	r25, 0x30	; 48
 198:	21 50       	subi	r18, 0x01	; 1
 19a:	80 40       	sbci	r24, 0x00	; 0
 19c:	90 40       	sbci	r25, 0x00	; 0
 19e:	e1 f7       	brne	.-8      	; 0x198 <main+0x34>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <main+0x3e>
 1a2:	00 00       	nop
 1a4:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <i>
 1a8:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <i+0x1>
 1ac:	01 96       	adiw	r24, 0x01	; 1
 1ae:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <i+0x1>
 1b2:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <i>
 1b6:	e7 cf       	rjmp	.-50     	; 0x186 <main+0x22>
 1b8:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <pulsecount>
		{
			_delay_ms(1000);
		}
		
		if((pulsecount > 20) && (door_closed == true))
 1bc:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <pulsecount+0x1>
 1c0:	45 97       	sbiw	r24, 0x15	; 21
 1c2:	1c f0       	brlt	.+6      	; 0x1ca <main+0x66>
 1c4:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 1c8:	01 c0       	rjmp	.+2      	; 0x1cc <main+0x68>
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	88 23       	and	r24, r24
 1ce:	49 f0       	breq	.+18     	; 0x1e2 <main+0x7e>
 1d0:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <count>
		{
				count++;
 1d4:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <count+0x1>
 1d8:	01 96       	adiw	r24, 0x01	; 1
 1da:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <count+0x1>
 1de:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <count>
 1e2:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <count>
		}
		num_people=count;
 1e6:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <count+0x1>
 1ea:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <num_people+0x1>
 1ee:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <num_people>
 1f2:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <count+0x1>
		count=0;
 1f6:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <count>
 1fa:	c1 cf       	rjmp	.-126    	; 0x17e <main+0x1a>

000001fc <__vector_25>:
 1fc:	1f 92       	push	r1
		}

	}
}
ISR(USART0_RX_vect)
{
 1fe:	0f 92       	push	r0
 200:	0f b6       	in	r0, 0x3f	; 63
 202:	0f 92       	push	r0
 204:	11 24       	eor	r1, r1
 206:	0b b6       	in	r0, 0x3b	; 59
 208:	0f 92       	push	r0
 20a:	2f 93       	push	r18
 20c:	8f 93       	push	r24
 20e:	9f 93       	push	r25
 210:	ef 93       	push	r30
 212:	ff 93       	push	r31
	
	buffer0[position0]=UDR0;
 214:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <position0>
 218:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <position0+0x1>
 21c:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 220:	fc 01       	movw	r30, r24
 222:	e3 5f       	subi	r30, 0xF3	; 243
 224:	fc 4f       	sbci	r31, 0xFC	; 252
 226:	20 83       	st	Z, r18
	position0++;
 228:	01 96       	adiw	r24, 0x01	; 1
 22a:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <position0+0x1>
 22e:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <position0>
}
 232:	ff 91       	pop	r31
 234:	ef 91       	pop	r30
 236:	9f 91       	pop	r25
 238:	8f 91       	pop	r24
 23a:	2f 91       	pop	r18
 23c:	0f 90       	pop	r0
 23e:	0b be       	out	0x3b, r0	; 59
 240:	0f 90       	pop	r0
 242:	0f be       	out	0x3f, r0	; 63
 244:	0f 90       	pop	r0
 246:	1f 90       	pop	r1
 248:	18 95       	reti

0000024a <__vector_36>:

ISR(USART1_RX_vect)
{
 24a:	1f 92       	push	r1
 24c:	0f 92       	push	r0
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	0f 92       	push	r0
 252:	11 24       	eor	r1, r1
 254:	0b b6       	in	r0, 0x3b	; 59
 256:	0f 92       	push	r0
 258:	2f 93       	push	r18
 25a:	8f 93       	push	r24
 25c:	9f 93       	push	r25
 25e:	ef 93       	push	r30
 260:	ff 93       	push	r31
	
	buffer1[position1]=UDR1;
 262:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <position1>
 266:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <position1+0x1>
 26a:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
 26e:	fc 01       	movw	r30, r24
 270:	e3 5f       	subi	r30, 0xF3	; 243
 272:	fd 4f       	sbci	r31, 0xFD	; 253
 274:	20 83       	st	Z, r18
	position1++;
 276:	01 96       	adiw	r24, 0x01	; 1
 278:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <position1+0x1>
 27c:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <position1>
}
 280:	ff 91       	pop	r31
 282:	ef 91       	pop	r30
 284:	9f 91       	pop	r25
 286:	8f 91       	pop	r24
 288:	2f 91       	pop	r18
 28a:	0f 90       	pop	r0
 28c:	0b be       	out	0x3b, r0	; 59
 28e:	0f 90       	pop	r0
 290:	0f be       	out	0x3f, r0	; 63
 292:	0f 90       	pop	r0
 294:	1f 90       	pop	r1
 296:	18 95       	reti

00000298 <__vector_2>:

//flow meter
ISR(INT1_vect)
{
 298:	1f 92       	push	r1
 29a:	0f 92       	push	r0
 29c:	0f b6       	in	r0, 0x3f	; 63
 29e:	0f 92       	push	r0
 2a0:	11 24       	eor	r1, r1
 2a2:	8f 93       	push	r24
 2a4:	9f 93       	push	r25
	pulsecount++;
 2a6:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <pulsecount>
 2aa:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <pulsecount+0x1>
 2ae:	01 96       	adiw	r24, 0x01	; 1
 2b0:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <pulsecount+0x1>
 2b4:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <pulsecount>
}
 2b8:	9f 91       	pop	r25
 2ba:	8f 91       	pop	r24
 2bc:	0f 90       	pop	r0
 2be:	0f be       	out	0x3f, r0	; 63
 2c0:	0f 90       	pop	r0
 2c2:	1f 90       	pop	r1
 2c4:	18 95       	reti

000002c6 <__vector_3>:

//reed switch
ISR(INT2_vect)
{
 2c6:	1f 92       	push	r1
 2c8:	0f 92       	push	r0
 2ca:	0f b6       	in	r0, 0x3f	; 63
 2cc:	0f 92       	push	r0
 2ce:	11 24       	eor	r1, r1
 2d0:	8f 93       	push	r24
	if(door_closed == false)
 2d2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 2d6:	81 11       	cpse	r24, r1
 2d8:	04 c0       	rjmp	.+8      	; 0x2e2 <__vector_3+0x1c>
	{
		door_closed=true;
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <__vector_3+0x20>
	}
	else
	{
		door_closed=false;
 2e2:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
	}
}
 2e6:	8f 91       	pop	r24
 2e8:	0f 90       	pop	r0
 2ea:	0f be       	out	0x3f, r0	; 63
 2ec:	0f 90       	pop	r0
 2ee:	1f 90       	pop	r1
 2f0:	18 95       	reti

000002f2 <_exit>:
 2f2:	f8 94       	cli

000002f4 <__stop_program>:
 2f4:	ff cf       	rjmp	.-2      	; 0x2f4 <__stop_program>
