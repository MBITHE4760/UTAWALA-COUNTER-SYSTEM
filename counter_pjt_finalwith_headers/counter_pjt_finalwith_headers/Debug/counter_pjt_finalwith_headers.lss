
counter_pjt_finalwith_headers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000522  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000220  00800200  00800200  00000522  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000522  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000554  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000594  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001225  00000000  00000000  0000062c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cb3  00000000  00000000  00001851  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000660  00000000  00000000  00002504  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e4  00000000  00000000  00002b64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000896  00000000  00000000  00002d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000036c  00000000  00000000  000035de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  0000394a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	7a c1       	rjmp	.+756    	; 0x2fa <__vector_1>
   6:	00 00       	nop
   8:	8f c1       	rjmp	.+798    	; 0x328 <__vector_2>
   a:	00 00       	nop
   c:	a4 c1       	rjmp	.+840    	; 0x356 <__vector_3>
   e:	00 00       	nop
  10:	b5 c1       	rjmp	.+874    	; 0x37c <__vector_4>
  12:	00 00       	nop
  14:	f5 c1       	rjmp	.+1002   	; 0x400 <__vector_5>
  16:	00 00       	nop
  18:	06 c2       	rjmp	.+1036   	; 0x426 <__vector_6>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	b7 c0       	rjmp	.+366    	; 0x1d4 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	56 c0       	rjmp	.+172    	; 0x186 <__vector_54>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee ea       	ldi	r30, 0xAE	; 174
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	24 e0       	ldi	r18, 0x04	; 4
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a0 32       	cpi	r26, 0x20	; 32
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	ca d0       	rcall	.+404    	; 0x2b4 <main>
 120:	c4 c1       	rjmp	.+904    	; 0x4aa <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <_Z10send_countv>:



void send_count()
{
	num_ladies=ladies_total_count;
 124:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <ladies_total_count>
 128:	90 91 1f 04 	lds	r25, 0x041F	; 0x80041f <ladies_total_count+0x1>
 12c:	90 93 19 04 	sts	0x0419, r25	; 0x800419 <num_ladies+0x1>
 130:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <num_ladies>
	ladies_total_count=0;
 134:	10 92 1f 04 	sts	0x041F, r1	; 0x80041f <ladies_total_count+0x1>
 138:	10 92 1e 04 	sts	0x041E, r1	; 0x80041e <ladies_total_count>
	num_gents=gents_total_count;
 13c:	80 91 1c 04 	lds	r24, 0x041C	; 0x80041c <gents_total_count>
 140:	90 91 1d 04 	lds	r25, 0x041D	; 0x80041d <gents_total_count+0x1>
 144:	90 93 17 04 	sts	0x0417, r25	; 0x800417 <num_gents+0x1>
 148:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <num_gents>
	gents_total_count=0;
 14c:	10 92 1d 04 	sts	0x041D, r1	; 0x80041d <gents_total_count+0x1>
 150:	10 92 1c 04 	sts	0x041C, r1	; 0x80041c <gents_total_count>
	num_gentsbafu=gentsbafu_count;
 154:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <gentsbafu_count>
 158:	90 91 0b 04 	lds	r25, 0x040B	; 0x80040b <gentsbafu_count+0x1>
 15c:	90 93 07 04 	sts	0x0407, r25	; 0x800407 <num_gentsbafu+0x1>
 160:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <num_gentsbafu>
	gentsbafu_count=0;
 164:	10 92 0b 04 	sts	0x040B, r1	; 0x80040b <gentsbafu_count+0x1>
 168:	10 92 0a 04 	sts	0x040A, r1	; 0x80040a <gentsbafu_count>
	num_ladiesbafu=ladiesbafu_count;
 16c:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <ladiesbafu_count>
 170:	90 91 09 04 	lds	r25, 0x0409	; 0x800409 <ladiesbafu_count+0x1>
 174:	90 93 05 04 	sts	0x0405, r25	; 0x800405 <num_ladiesbafu+0x1>
 178:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <num_ladiesbafu>
	ladiesbafu_count=0;
 17c:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <ladiesbafu_count+0x1>
 180:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <ladiesbafu_count>
 184:	08 95       	ret

00000186 <__vector_54>:
	}
	clearbuffer3();
	}
}
ISR(USART3_RX_vect)//gsm
{
 186:	1f 92       	push	r1
 188:	0f 92       	push	r0
 18a:	0f b6       	in	r0, 0x3f	; 63
 18c:	0f 92       	push	r0
 18e:	11 24       	eor	r1, r1
 190:	0b b6       	in	r0, 0x3b	; 59
 192:	0f 92       	push	r0
 194:	2f 93       	push	r18
 196:	8f 93       	push	r24
 198:	9f 93       	push	r25
 19a:	ef 93       	push	r30
 19c:	ff 93       	push	r31
	
	buffer3[position3]=UDR3;
 19e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 1a2:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 1a6:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
 1aa:	fc 01       	movw	r30, r24
 1ac:	ec 5f       	subi	r30, 0xFC	; 252
 1ae:	fd 4f       	sbci	r31, 0xFD	; 253
 1b0:	20 83       	st	Z, r18
	position3++;
 1b2:	01 96       	adiw	r24, 0x01	; 1
 1b4:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 1b8:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
}
 1bc:	ff 91       	pop	r31
 1be:	ef 91       	pop	r30
 1c0:	9f 91       	pop	r25
 1c2:	8f 91       	pop	r24
 1c4:	2f 91       	pop	r18
 1c6:	0f 90       	pop	r0
 1c8:	0b be       	out	0x3b, r0	; 59
 1ca:	0f 90       	pop	r0
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	0f 90       	pop	r0
 1d0:	1f 90       	pop	r1
 1d2:	18 95       	reti

000001d4 <__vector_25>:

ISR(USART0_RX_vect)//serial
{
 1d4:	1f 92       	push	r1
 1d6:	0f 92       	push	r0
 1d8:	0f b6       	in	r0, 0x3f	; 63
 1da:	0f 92       	push	r0
 1dc:	11 24       	eor	r1, r1
 1de:	0b b6       	in	r0, 0x3b	; 59
 1e0:	0f 92       	push	r0
 1e2:	2f 93       	push	r18
 1e4:	8f 93       	push	r24
 1e6:	9f 93       	push	r25
 1e8:	ef 93       	push	r30
 1ea:	ff 93       	push	r31
	
	buffer0[position0]=UDR0;
 1ec:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <position0>
 1f0:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <position0+0x1>
 1f4:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 1f8:	fc 01       	movw	r30, r24
 1fa:	ec 5f       	subi	r30, 0xFC	; 252
 1fc:	fc 4f       	sbci	r31, 0xFC	; 252
 1fe:	20 83       	st	Z, r18
	position0++;
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <position0+0x1>
 206:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <position0>
}
 20a:	ff 91       	pop	r31
 20c:	ef 91       	pop	r30
 20e:	9f 91       	pop	r25
 210:	8f 91       	pop	r24
 212:	2f 91       	pop	r18
 214:	0f 90       	pop	r0
 216:	0b be       	out	0x3b, r0	; 59
 218:	0f 90       	pop	r0
 21a:	0f be       	out	0x3f, r0	; 63
 21c:	0f 90       	pop	r0
 21e:	1f 90       	pop	r1
 220:	18 95       	reti

00000222 <_Z17enable_interruptsv>:


void enable_interrupts()
{
	//IR-ladies entrance
	EIMSK|=(1<<INT0);//external interrupt request 0 enable
 222:	8d b3       	in	r24, 0x1d	; 29
 224:	81 60       	ori	r24, 0x01	; 1
 226:	8d bb       	out	0x1d, r24	; 29
	EICRA|=(1<<ISC01)|(0<<ISC00);//trigger INTO 0n falling edge. Interrupt 0 sense control
 228:	e9 e6       	ldi	r30, 0x69	; 105
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	80 81       	ld	r24, Z
 22e:	82 60       	ori	r24, 0x02	; 2
 230:	80 83       	st	Z, r24

	// 	IR-gents entrance
	EIMSK|=(1<<INT1);//external interrupt request 0 enable
 232:	8d b3       	in	r24, 0x1d	; 29
 234:	82 60       	ori	r24, 0x02	; 2
 236:	8d bb       	out	0x1d, r24	; 29
	EICRA|=(1<<ISC11)|(0<<ISC10);//trigger INTO 0n falling edge. Interrupt 0 sense control
 238:	80 81       	ld	r24, Z
 23a:	88 60       	ori	r24, 0x08	; 8
 23c:	80 83       	st	Z, r24
	//
	// 	//Magnetic reed switch-gents bathroom door
	EIMSK|=(1<<INT2);//external interrupt request 0 enable
 23e:	8d b3       	in	r24, 0x1d	; 29
 240:	84 60       	ori	r24, 0x04	; 4
 242:	8d bb       	out	0x1d, r24	; 29
	EICRA|=(0<<ISC21)|(1<<ISC20);//trigger INTO 0n any edge. Interrupt 0 sense control
 244:	80 81       	ld	r24, Z
 246:	80 61       	ori	r24, 0x10	; 16
 248:	80 83       	st	Z, r24
	//
	// 	//water flow sensor-gents shower
	EIMSK|=(1<<INT3);//external interrupt request 0 enable
 24a:	8d b3       	in	r24, 0x1d	; 29
 24c:	88 60       	ori	r24, 0x08	; 8
 24e:	8d bb       	out	0x1d, r24	; 29
	EICRA|=(1<<ISC31)|(1<<ISC30);//trigger INTO 0n rising edge. Interrupt 0 sense control
 250:	80 81       	ld	r24, Z
 252:	80 6c       	ori	r24, 0xC0	; 192
 254:	80 83       	st	Z, r24
	//
	// 	//Magnetic reed switch-ladies bathroom door
	EIMSK|=(1<<INT4);//external interrupt request 0 enable
 256:	8d b3       	in	r24, 0x1d	; 29
 258:	80 61       	ori	r24, 0x10	; 16
 25a:	8d bb       	out	0x1d, r24	; 29
	EICRB|=(0<<ISC41)|(1<<ISC40);//trigger INTO 0n any edge. Interrupt 0 sense control
 25c:	ea e6       	ldi	r30, 0x6A	; 106
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	80 81       	ld	r24, Z
 262:	81 60       	ori	r24, 0x01	; 1
 264:	80 83       	st	Z, r24
	//
	// 	//water flow sensor-ladies shower
	EIMSK|=(1<<INT5);//external interrupt request 0 enable
 266:	8d b3       	in	r24, 0x1d	; 29
 268:	80 62       	ori	r24, 0x20	; 32
 26a:	8d bb       	out	0x1d, r24	; 29
	EICRB|=(1<<ISC51)|(1<<ISC50);//trigger INTO 0n rising edge. Interrupt 0 sense control
 26c:	80 81       	ld	r24, Z
 26e:	8c 60       	ori	r24, 0x0C	; 12
 270:	80 83       	st	Z, r24
 272:	08 95       	ret

00000274 <_Z11UART0_BEGINv>:
#include "gsm.h"
#include "interrupts.h"

void UART0_BEGIN()
{
	UBRR0H=0;
 274:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UBRR0L=103;
 278:	87 e6       	ldi	r24, 0x67	; 103
 27a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	UCSR0B|=(1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
 27e:	e1 ec       	ldi	r30, 0xC1	; 193
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	80 81       	ld	r24, Z
 284:	88 69       	ori	r24, 0x98	; 152
 286:	80 83       	st	Z, r24
	UCSR0C|=(1<<UCSZ00)|(1<<UCSZ01);
 288:	e2 ec       	ldi	r30, 0xC2	; 194
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	80 81       	ld	r24, Z
 28e:	86 60       	ori	r24, 0x06	; 6
 290:	80 83       	st	Z, r24
 292:	08 95       	ret

00000294 <_Z11UART3_BEGINv>:
}
void UART3_BEGIN()
{
	UBRR3H=0;
 294:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <__TEXT_REGION_LENGTH__+0x7c0135>
	UBRR3L=103;
 298:	87 e6       	ldi	r24, 0x67	; 103
 29a:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x7c0134>
	UCSR3B|=(1<<RXEN3)|(1<<TXEN3)|(1<<RXCIE3);
 29e:	e1 e3       	ldi	r30, 0x31	; 49
 2a0:	f1 e0       	ldi	r31, 0x01	; 1
 2a2:	80 81       	ld	r24, Z
 2a4:	88 69       	ori	r24, 0x98	; 152
 2a6:	80 83       	st	Z, r24
	UCSR3C|=(1<<UCSZ30)|(1<<UCSZ31);
 2a8:	e2 e3       	ldi	r30, 0x32	; 50
 2aa:	f1 e0       	ldi	r31, 0x01	; 1
 2ac:	80 81       	ld	r24, Z
 2ae:	86 60       	ori	r24, 0x06	; 6
 2b0:	80 83       	st	Z, r24
 2b2:	08 95       	ret

000002b4 <main>:
}


int main(void)
{
	UART0_BEGIN();
 2b4:	df df       	rcall	.-66     	; 0x274 <_Z11UART0_BEGINv>
	UART3_BEGIN();
 2b6:	ee df       	rcall	.-36     	; 0x294 <_Z11UART3_BEGINv>
	enable_interrupts();
 2b8:	b4 df       	rcall	.-152    	; 0x222 <_Z17enable_interruptsv>
 2ba:	78 94       	sei
	sei();
 2bc:	10 92 1b 04 	sts	0x041B, r1	; 0x80041b <i+0x1>
	while (1)
	{
		for(i=0; i<60; i++)
 2c0:	10 92 1a 04 	sts	0x041A, r1	; 0x80041a <i>
 2c4:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <i>
 2c8:	90 91 1b 04 	lds	r25, 0x041B	; 0x80041b <i+0x1>
 2cc:	cc 97       	sbiw	r24, 0x3c	; 60
 2ce:	9c f4       	brge	.+38     	; 0x2f6 <main+0x42>
 2d0:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d2:	83 ed       	ldi	r24, 0xD3	; 211
 2d4:	90 e3       	ldi	r25, 0x30	; 48
 2d6:	21 50       	subi	r18, 0x01	; 1
 2d8:	80 40       	sbci	r24, 0x00	; 0
 2da:	90 40       	sbci	r25, 0x00	; 0
 2dc:	e1 f7       	brne	.-8      	; 0x2d6 <main+0x22>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <main+0x2c>
 2e0:	00 00       	nop
 2e2:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <i>
 2e6:	90 91 1b 04 	lds	r25, 0x041B	; 0x80041b <i+0x1>
 2ea:	01 96       	adiw	r24, 0x01	; 1
 2ec:	90 93 1b 04 	sts	0x041B, r25	; 0x80041b <i+0x1>
 2f0:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <i>
 2f4:	e7 cf       	rjmp	.-50     	; 0x2c4 <main+0x10>
		{//1 minute delay
			_delay_ms(1000);
		}
			send_count();
 2f6:	16 df       	rcall	.-468    	; 0x124 <_Z10send_countv>
 2f8:	e1 cf       	rjmp	.-62     	; 0x2bc <main+0x8>

000002fa <__vector_1>:
{
	UART0_BEGIN();
	UART3_BEGIN();
	enable_interrupts();
	sei();
	while (1)
 2fa:	1f 92       	push	r1

	}
}

ISR(INT0_vect)
{//ladies entrance
 2fc:	0f 92       	push	r0
 2fe:	0f b6       	in	r0, 0x3f	; 63
 300:	0f 92       	push	r0
 302:	11 24       	eor	r1, r1
 304:	8f 93       	push	r24
 306:	9f 93       	push	r25
	ladies_total_count++;
 308:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <ladies_total_count>
 30c:	90 91 1f 04 	lds	r25, 0x041F	; 0x80041f <ladies_total_count+0x1>
 310:	01 96       	adiw	r24, 0x01	; 1
 312:	90 93 1f 04 	sts	0x041F, r25	; 0x80041f <ladies_total_count+0x1>
 316:	80 93 1e 04 	sts	0x041E, r24	; 0x80041e <ladies_total_count>
}
 31a:	9f 91       	pop	r25
 31c:	8f 91       	pop	r24
 31e:	0f 90       	pop	r0
 320:	0f be       	out	0x3f, r0	; 63
 322:	0f 90       	pop	r0
 324:	1f 90       	pop	r1
 326:	18 95       	reti

00000328 <__vector_2>:
ISR(INT1_vect)
{//gents entrance
 328:	1f 92       	push	r1
 32a:	0f 92       	push	r0
 32c:	0f b6       	in	r0, 0x3f	; 63
 32e:	0f 92       	push	r0
 330:	11 24       	eor	r1, r1
 332:	8f 93       	push	r24
 334:	9f 93       	push	r25
	gents_total_count++;
 336:	80 91 1c 04 	lds	r24, 0x041C	; 0x80041c <gents_total_count>
 33a:	90 91 1d 04 	lds	r25, 0x041D	; 0x80041d <gents_total_count+0x1>
 33e:	01 96       	adiw	r24, 0x01	; 1
 340:	90 93 1d 04 	sts	0x041D, r25	; 0x80041d <gents_total_count+0x1>
 344:	80 93 1c 04 	sts	0x041C, r24	; 0x80041c <gents_total_count>
}
 348:	9f 91       	pop	r25
 34a:	8f 91       	pop	r24
 34c:	0f 90       	pop	r0
 34e:	0f be       	out	0x3f, r0	; 63
 350:	0f 90       	pop	r0
 352:	1f 90       	pop	r1
 354:	18 95       	reti

00000356 <__vector_3>:
ISR(INT2_vect)
{//gents bathroom door
 356:	1f 92       	push	r1
 358:	0f 92       	push	r0
 35a:	0f b6       	in	r0, 0x3f	; 63
 35c:	0f 92       	push	r0
 35e:	11 24       	eor	r1, r1
 360:	8f 93       	push	r24
	gentsbafu_closed=true;
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <gentsbafu_closed>
	gents_bath_flag=0;
 368:	10 92 13 04 	sts	0x0413, r1	; 0x800413 <gents_bath_flag+0x1>
 36c:	10 92 12 04 	sts	0x0412, r1	; 0x800412 <gents_bath_flag>
}
 370:	8f 91       	pop	r24
 372:	0f 90       	pop	r0
 374:	0f be       	out	0x3f, r0	; 63
 376:	0f 90       	pop	r0
 378:	1f 90       	pop	r1
 37a:	18 95       	reti

0000037c <__vector_4>:
ISR(INT3_vect)
{//gents shower-water flow sensor
 37c:	1f 92       	push	r1
 37e:	0f 92       	push	r0
 380:	0f b6       	in	r0, 0x3f	; 63
 382:	0f 92       	push	r0
 384:	11 24       	eor	r1, r1
 386:	2f 93       	push	r18
 388:	3f 93       	push	r19
 38a:	8f 93       	push	r24
 38c:	9f 93       	push	r25
	pulsecount_gents++;
 38e:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <pulsecount_gents>
 392:	90 91 0d 04 	lds	r25, 0x040D	; 0x80040d <pulsecount_gents+0x1>
 396:	01 96       	adiw	r24, 0x01	; 1
 398:	90 93 0d 04 	sts	0x040D, r25	; 0x80040d <pulsecount_gents+0x1>
 39c:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <pulsecount_gents>
	if ((pulsecount_gents>100) && (gentsbafu_closed == true) && (gents_bath_flag == 0))
 3a0:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <pulsecount_gents>
 3a4:	90 91 0d 04 	lds	r25, 0x040D	; 0x80040d <pulsecount_gents+0x1>
 3a8:	85 36       	cpi	r24, 0x65	; 101
 3aa:	91 05       	cpc	r25, r1
 3ac:	64 f0       	brlt	.+24     	; 0x3c6 <__vector_4+0x4a>
 3ae:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <gentsbafu_closed>
 3b2:	88 23       	and	r24, r24
 3b4:	51 f0       	breq	.+20     	; 0x3ca <__vector_4+0x4e>
 3b6:	20 91 12 04 	lds	r18, 0x0412	; 0x800412 <gents_bath_flag>
 3ba:	30 91 13 04 	lds	r19, 0x0413	; 0x800413 <gents_bath_flag+0x1>
 3be:	23 2b       	or	r18, r19
 3c0:	29 f0       	breq	.+10     	; 0x3cc <__vector_4+0x50>
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	03 c0       	rjmp	.+6      	; 0x3cc <__vector_4+0x50>
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	01 c0       	rjmp	.+2      	; 0x3cc <__vector_4+0x50>
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	88 23       	and	r24, r24
 3ce:	79 f0       	breq	.+30     	; 0x3ee <__vector_4+0x72>
	{
		gents_bath_flag=1;
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	90 93 13 04 	sts	0x0413, r25	; 0x800413 <gents_bath_flag+0x1>
 3d8:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <gents_bath_flag>
		gentsbafu_count++;
 3dc:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <gentsbafu_count>
 3e0:	90 91 0b 04 	lds	r25, 0x040B	; 0x80040b <gentsbafu_count+0x1>
 3e4:	01 96       	adiw	r24, 0x01	; 1
 3e6:	90 93 0b 04 	sts	0x040B, r25	; 0x80040b <gentsbafu_count+0x1>
 3ea:	80 93 0a 04 	sts	0x040A, r24	; 0x80040a <gentsbafu_count>
	}
}
 3ee:	9f 91       	pop	r25
 3f0:	8f 91       	pop	r24
 3f2:	3f 91       	pop	r19
 3f4:	2f 91       	pop	r18
 3f6:	0f 90       	pop	r0
 3f8:	0f be       	out	0x3f, r0	; 63
 3fa:	0f 90       	pop	r0
 3fc:	1f 90       	pop	r1
 3fe:	18 95       	reti

00000400 <__vector_5>:
ISR(INT4_vect)
{//ladies bathroom door
 400:	1f 92       	push	r1
 402:	0f 92       	push	r0
 404:	0f b6       	in	r0, 0x3f	; 63
 406:	0f 92       	push	r0
 408:	11 24       	eor	r1, r1
 40a:	8f 93       	push	r24
	ladiesbafu_closed=true;
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <ladiesbafu_closed>
	ladies_bath_flag=0;
 412:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <ladies_bath_flag+0x1>
 416:	10 92 10 04 	sts	0x0410, r1	; 0x800410 <ladies_bath_flag>
}
 41a:	8f 91       	pop	r24
 41c:	0f 90       	pop	r0
 41e:	0f be       	out	0x3f, r0	; 63
 420:	0f 90       	pop	r0
 422:	1f 90       	pop	r1
 424:	18 95       	reti

00000426 <__vector_6>:
ISR(INT5_vect)
{//ladies shower-water flow sensor
 426:	1f 92       	push	r1
 428:	0f 92       	push	r0
 42a:	0f b6       	in	r0, 0x3f	; 63
 42c:	0f 92       	push	r0
 42e:	11 24       	eor	r1, r1
 430:	2f 93       	push	r18
 432:	3f 93       	push	r19
 434:	8f 93       	push	r24
 436:	9f 93       	push	r25
	pulsecount_ladies++;
 438:	80 91 0e 04 	lds	r24, 0x040E	; 0x80040e <pulsecount_ladies>
 43c:	90 91 0f 04 	lds	r25, 0x040F	; 0x80040f <pulsecount_ladies+0x1>
 440:	01 96       	adiw	r24, 0x01	; 1
 442:	90 93 0f 04 	sts	0x040F, r25	; 0x80040f <pulsecount_ladies+0x1>
 446:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <pulsecount_ladies>
	if ((pulsecount_ladies>100) && (ladiesbafu_closed == true) && (ladies_bath_flag == 0))
 44a:	80 91 0e 04 	lds	r24, 0x040E	; 0x80040e <pulsecount_ladies>
 44e:	90 91 0f 04 	lds	r25, 0x040F	; 0x80040f <pulsecount_ladies+0x1>
 452:	85 36       	cpi	r24, 0x65	; 101
 454:	91 05       	cpc	r25, r1
 456:	64 f0       	brlt	.+24     	; 0x470 <__vector_6+0x4a>
 458:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <ladiesbafu_closed>
 45c:	88 23       	and	r24, r24
 45e:	51 f0       	breq	.+20     	; 0x474 <__vector_6+0x4e>
 460:	20 91 10 04 	lds	r18, 0x0410	; 0x800410 <ladies_bath_flag>
 464:	30 91 11 04 	lds	r19, 0x0411	; 0x800411 <ladies_bath_flag+0x1>
 468:	23 2b       	or	r18, r19
 46a:	29 f0       	breq	.+10     	; 0x476 <__vector_6+0x50>
 46c:	80 e0       	ldi	r24, 0x00	; 0
 46e:	03 c0       	rjmp	.+6      	; 0x476 <__vector_6+0x50>
 470:	80 e0       	ldi	r24, 0x00	; 0
 472:	01 c0       	rjmp	.+2      	; 0x476 <__vector_6+0x50>
 474:	80 e0       	ldi	r24, 0x00	; 0
 476:	88 23       	and	r24, r24
 478:	79 f0       	breq	.+30     	; 0x498 <__vector_6+0x72>
	{
		ladies_bath_flag=1;
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	90 93 11 04 	sts	0x0411, r25	; 0x800411 <ladies_bath_flag+0x1>
 482:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <ladies_bath_flag>
		ladiesbafu_count++;
 486:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <ladiesbafu_count>
 48a:	90 91 09 04 	lds	r25, 0x0409	; 0x800409 <ladiesbafu_count+0x1>
 48e:	01 96       	adiw	r24, 0x01	; 1
 490:	90 93 09 04 	sts	0x0409, r25	; 0x800409 <ladiesbafu_count+0x1>
 494:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <ladiesbafu_count>
	}
}
 498:	9f 91       	pop	r25
 49a:	8f 91       	pop	r24
 49c:	3f 91       	pop	r19
 49e:	2f 91       	pop	r18
 4a0:	0f 90       	pop	r0
 4a2:	0f be       	out	0x3f, r0	; 63
 4a4:	0f 90       	pop	r0
 4a6:	1f 90       	pop	r1
 4a8:	18 95       	reti

000004aa <_exit>:
 4aa:	f8 94       	cli

000004ac <__stop_program>:
 4ac:	ff cf       	rjmp	.-2      	; 0x4ac <__stop_program>
