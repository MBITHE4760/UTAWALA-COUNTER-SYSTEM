
IR_COUNT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800200  00000398  0000042c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000398  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  0080021c  0080021c  00000448  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000478  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001053  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d1f  00000000  00000000  00001553  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004a2  00000000  00000000  00002272  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  00002714  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000693  00000000  00000000  000027dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000220  00000000  00000000  00002e6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  0000308f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	28 c1       	rjmp	.+592    	; 0x256 <__vector_1>
   6:	00 00       	nop
   8:	39 c1       	rjmp	.+626    	; 0x27c <__vector_2>
   a:	00 00       	nop
   c:	79 c1       	rjmp	.+754    	; 0x300 <__vector_3>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 e9       	ldi	r30, 0x98	; 152
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 31       	cpi	r26, 0x1C	; 28
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	ac e1       	ldi	r26, 0x1C	; 28
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ab 32       	cpi	r26, 0x2B	; 43
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	1f d0       	rcall	.+62     	; 0x15e <main>
 120:	39 c1       	rjmp	.+626    	; 0x394 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <_Z14UART0_TRANSMITPc>:
int bath_flag;
int total_count;
int all_people;
char total_people[]="Total Count:";
char bafu_count[]="Bafu Count:";
void UART0_TRANSMIT(char* data){
 124:	fc 01       	movw	r30, r24
	while(*data !='\0'){
 126:	80 81       	ld	r24, Z
 128:	88 23       	and	r24, r24
 12a:	41 f0       	breq	.+16     	; 0x13c <_Z14UART0_TRANSMITPc+0x18>
		while(!(UCSR0A & (1<<UDRE0))){}
 12c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 130:	95 ff       	sbrs	r25, 5
 132:	fc cf       	rjmp	.-8      	; 0x12c <_Z14UART0_TRANSMITPc+0x8>
		UDR0=*data;
 134:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
		data++;
 138:	31 96       	adiw	r30, 0x01	; 1
int total_count;
int all_people;
char total_people[]="Total Count:";
char bafu_count[]="Bafu Count:";
void UART0_TRANSMIT(char* data){
	while(*data !='\0'){
 13a:	f5 cf       	rjmp	.-22     	; 0x126 <_Z14UART0_TRANSMITPc+0x2>
 13c:	08 95       	ret

0000013e <_Z11UART0_BEGINv>:
		data++;
	}
}
void UART0_BEGIN()
{
	UBRR0H=0;
 13e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UBRR0L=103;
 142:	87 e6       	ldi	r24, 0x67	; 103
 144:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	UCSR0B|=(1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
 148:	e1 ec       	ldi	r30, 0xC1	; 193
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	88 69       	ori	r24, 0x98	; 152
 150:	80 83       	st	Z, r24
	UCSR0C|=(1<<UCSZ00)|(1<<UCSZ01);
 152:	e2 ec       	ldi	r30, 0xC2	; 194
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	86 60       	ori	r24, 0x06	; 6
 15a:	80 83       	st	Z, r24
 15c:	08 95       	ret

0000015e <main>:
}

int main(void)
{
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
 166:	64 97       	sbiw	r28, 0x14	; 20
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	f8 94       	cli
 16c:	de bf       	out	0x3e, r29	; 62
 16e:	0f be       	out	0x3f, r0	; 63
 170:	cd bf       	out	0x3d, r28	; 61
	UART0_BEGIN();
 172:	e5 df       	rcall	.-54     	; 0x13e <_Z11UART0_BEGINv>
	EIMSK|=(1<<INT0);//external interrupt request 0 enable
 174:	8d b3       	in	r24, 0x1d	; 29
 176:	81 60       	ori	r24, 0x01	; 1
 178:	8d bb       	out	0x1d, r24	; 29
	EICRA|=(1<<ISC01)|(1<<ISC00);//trigger INTO 0n rising edge. Interrupt 0 sense control
 17a:	e9 e6       	ldi	r30, 0x69	; 105
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	83 60       	ori	r24, 0x03	; 3
 182:	80 83       	st	Z, r24
	EIMSK|=(1<<INT1);//external interrupt request 1 enable
 184:	8d b3       	in	r24, 0x1d	; 29
 186:	82 60       	ori	r24, 0x02	; 2
 188:	8d bb       	out	0x1d, r24	; 29
	EICRA|=(1<<ISC11)|(1<<ISC10);//trigger INTO 0n rising edge. Interrupt 0 sense control
 18a:	80 81       	ld	r24, Z
 18c:	8c 60       	ori	r24, 0x0C	; 12
 18e:	80 83       	st	Z, r24
	EIMSK|=(1<<INT2);//external interrupt request 1 enable
 190:	8d b3       	in	r24, 0x1d	; 29
 192:	84 60       	ori	r24, 0x04	; 4
 194:	8d bb       	out	0x1d, r24	; 29
	EICRA|=(1<<ISC21)|(0<<ISC20);//trigger INTO 0n falling edge. Interrupt 0 sense control
 196:	80 81       	ld	r24, Z
 198:	80 62       	ori	r24, 0x20	; 32
 19a:	80 83       	st	Z, r24
	doorclosed=false;
 19c:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <doorclosed>
	bath_flag=0;
 1a0:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <bath_flag+0x1>
 1a4:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <bath_flag>
	sei();
 1a8:	78 94       	sei
	while (1){
		
	for (i=0;i<20;i++)
 1aa:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <i+0x1>
 1ae:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <i>
 1b2:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <i>
 1b6:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <i+0x1>
 1ba:	44 97       	sbiw	r24, 0x14	; 20
 1bc:	9c f4       	brge	.+38     	; 0x1e4 <main+0x86>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1be:	2f ef       	ldi	r18, 0xFF	; 255
 1c0:	83 ed       	ldi	r24, 0xD3	; 211
 1c2:	90 e3       	ldi	r25, 0x30	; 48
 1c4:	21 50       	subi	r18, 0x01	; 1
 1c6:	80 40       	sbci	r24, 0x00	; 0
 1c8:	90 40       	sbci	r25, 0x00	; 0
 1ca:	e1 f7       	brne	.-8      	; 0x1c4 <main+0x66>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <main+0x70>
 1ce:	00 00       	nop
 1d0:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <i>
 1d4:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <i+0x1>
 1d8:	01 96       	adiw	r24, 0x01	; 1
 1da:	90 93 2a 02 	sts	0x022A, r25	; 0x80022a <i+0x1>
 1de:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <i>
 1e2:	e7 cf       	rjmp	.-50     	; 0x1b2 <main+0x54>
	{
		_delay_ms(1000);
	}
		num_people=bathroomcount;
 1e4:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <bathroomcount>
 1e8:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <bathroomcount+0x1>
 1ec:	90 93 28 02 	sts	0x0228, r25	; 0x800228 <num_people+0x1>
 1f0:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <num_people>
		bathroomcount=0;
 1f4:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <bathroomcount+0x1>
 1f8:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <bathroomcount>
		all_people=total_count;
 1fc:	20 91 1e 02 	lds	r18, 0x021E	; 0x80021e <total_count>
 200:	30 91 1f 02 	lds	r19, 0x021F	; 0x80021f <total_count+0x1>
 204:	30 93 1d 02 	sts	0x021D, r19	; 0x80021d <__data_end+0x1>
 208:	20 93 1c 02 	sts	0x021C, r18	; 0x80021c <__data_end>
		total_count=0;
 20c:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <total_count+0x1>
 210:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <total_count>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 214:	4a e0       	ldi	r20, 0x0A	; 10
 216:	be 01       	movw	r22, r28
 218:	65 5f       	subi	r22, 0xF5	; 245
 21a:	7f 4f       	sbci	r23, 0xFF	; 255
 21c:	88 d0       	rcall	.+272    	; 0x32e <__itoa_ncheck>
 21e:	4a e0       	ldi	r20, 0x0A	; 10
 220:	be 01       	movw	r22, r28
 222:	6f 5f       	subi	r22, 0xFF	; 255
 224:	7f 4f       	sbci	r23, 0xFF	; 255
 226:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <__data_end>
 22a:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <__data_end+0x1>
 22e:	7f d0       	rcall	.+254    	; 0x32e <__itoa_ncheck>
		char ch[10];
		itoa(num_people,ch,10);
		
		char ch1[10];
		itoa(all_people,ch1,10);
		UART0_TRANSMIT(total_people);
 230:	8c e0       	ldi	r24, 0x0C	; 12
 232:	92 e0       	ldi	r25, 0x02	; 2
 234:	77 df       	rcall	.-274    	; 0x124 <_Z14UART0_TRANSMITPc>
		UART0_TRANSMIT(ch1);
 236:	ce 01       	movw	r24, r28
 238:	01 96       	adiw	r24, 0x01	; 1
 23a:	74 df       	rcall	.-280    	; 0x124 <_Z14UART0_TRANSMITPc>
		UART0_TRANSMIT("\n");
 23c:	89 e1       	ldi	r24, 0x19	; 25
 23e:	92 e0       	ldi	r25, 0x02	; 2
 240:	71 df       	rcall	.-286    	; 0x124 <_Z14UART0_TRANSMITPc>
		
		UART0_TRANSMIT(bafu_count);
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	92 e0       	ldi	r25, 0x02	; 2
 246:	6e df       	rcall	.-292    	; 0x124 <_Z14UART0_TRANSMITPc>
		UART0_TRANSMIT(ch);
 248:	ce 01       	movw	r24, r28
 24a:	0b 96       	adiw	r24, 0x0b	; 11
 24c:	6b df       	rcall	.-298    	; 0x124 <_Z14UART0_TRANSMITPc>
 24e:	89 e1       	ldi	r24, 0x19	; 25
		UART0_TRANSMIT("\n");
 250:	92 e0       	ldi	r25, 0x02	; 2
 252:	68 df       	rcall	.-304    	; 0x124 <_Z14UART0_TRANSMITPc>
 254:	aa cf       	rjmp	.-172    	; 0x1aa <main+0x4c>

00000256 <__vector_1>:
 256:	1f 92       	push	r1
	EIMSK|=(1<<INT2);//external interrupt request 1 enable
	EICRA|=(1<<ISC21)|(0<<ISC20);//trigger INTO 0n falling edge. Interrupt 0 sense control
	doorclosed=false;
	bath_flag=0;
	sei();
	while (1){
 258:	0f 92       	push	r0
		UART0_TRANSMIT("\n");
	}
}
//reed switch
ISR(INT0_vect)
{
 25a:	0f b6       	in	r0, 0x3f	; 63
 25c:	0f 92       	push	r0
 25e:	11 24       	eor	r1, r1
 260:	8f 93       	push	r24
 doorclosed=true;
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <doorclosed>
 bath_flag=0;
 268:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <bath_flag+0x1>
 26c:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <bath_flag>
}
 270:	8f 91       	pop	r24
 272:	0f 90       	pop	r0
 274:	0f be       	out	0x3f, r0	; 63
 276:	0f 90       	pop	r0
 278:	1f 90       	pop	r1
 27a:	18 95       	reti

0000027c <__vector_2>:
//flow meter
ISR(INT1_vect)
{
 27c:	1f 92       	push	r1
 27e:	0f 92       	push	r0
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	0f 92       	push	r0
 284:	11 24       	eor	r1, r1
 286:	2f 93       	push	r18
 288:	3f 93       	push	r19
 28a:	8f 93       	push	r24
 28c:	9f 93       	push	r25
	pulsecount++;
 28e:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <pulsecount>
 292:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <pulsecount+0x1>
 296:	01 96       	adiw	r24, 0x01	; 1
 298:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <pulsecount+0x1>
 29c:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <pulsecount>
	if ((pulsecount>100) && (doorclosed == true) && (bath_flag == 0))
 2a0:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <pulsecount>
 2a4:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <pulsecount+0x1>
 2a8:	85 36       	cpi	r24, 0x65	; 101
 2aa:	91 05       	cpc	r25, r1
 2ac:	64 f0       	brlt	.+24     	; 0x2c6 <__vector_2+0x4a>
 2ae:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <doorclosed>
 2b2:	88 23       	and	r24, r24
 2b4:	51 f0       	breq	.+20     	; 0x2ca <__vector_2+0x4e>
 2b6:	20 91 20 02 	lds	r18, 0x0220	; 0x800220 <bath_flag>
 2ba:	30 91 21 02 	lds	r19, 0x0221	; 0x800221 <bath_flag+0x1>
 2be:	23 2b       	or	r18, r19
 2c0:	29 f0       	breq	.+10     	; 0x2cc <__vector_2+0x50>
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	03 c0       	rjmp	.+6      	; 0x2cc <__vector_2+0x50>
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	01 c0       	rjmp	.+2      	; 0x2cc <__vector_2+0x50>
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	88 23       	and	r24, r24
 2ce:	79 f0       	breq	.+30     	; 0x2ee <__vector_2+0x72>
	{
		bath_flag=1;
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <bath_flag+0x1>
 2d8:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <bath_flag>
		bathroomcount++;
 2dc:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <bathroomcount>
 2e0:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <bathroomcount+0x1>
 2e4:	01 96       	adiw	r24, 0x01	; 1
 2e6:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <bathroomcount+0x1>
 2ea:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <bathroomcount>
	}
}
 2ee:	9f 91       	pop	r25
 2f0:	8f 91       	pop	r24
 2f2:	3f 91       	pop	r19
 2f4:	2f 91       	pop	r18
 2f6:	0f 90       	pop	r0
 2f8:	0f be       	out	0x3f, r0	; 63
 2fa:	0f 90       	pop	r0
 2fc:	1f 90       	pop	r1
 2fe:	18 95       	reti

00000300 <__vector_3>:

ISR(INT2_vect)
{
 300:	1f 92       	push	r1
 302:	0f 92       	push	r0
 304:	0f b6       	in	r0, 0x3f	; 63
 306:	0f 92       	push	r0
 308:	11 24       	eor	r1, r1
 30a:	8f 93       	push	r24
 30c:	9f 93       	push	r25
	//IR SENSOR.
	total_count++;
 30e:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <total_count>
 312:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <total_count+0x1>
 316:	01 96       	adiw	r24, 0x01	; 1
 318:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <total_count+0x1>
 31c:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <total_count>
 320:	9f 91       	pop	r25
 322:	8f 91       	pop	r24
 324:	0f 90       	pop	r0
 326:	0f be       	out	0x3f, r0	; 63
 328:	0f 90       	pop	r0
 32a:	1f 90       	pop	r1
 32c:	18 95       	reti

0000032e <__itoa_ncheck>:
 32e:	bb 27       	eor	r27, r27
 330:	4a 30       	cpi	r20, 0x0A	; 10
 332:	31 f4       	brne	.+12     	; 0x340 <__itoa_ncheck+0x12>
 334:	99 23       	and	r25, r25
 336:	22 f4       	brpl	.+8      	; 0x340 <__itoa_ncheck+0x12>
 338:	bd e2       	ldi	r27, 0x2D	; 45
 33a:	90 95       	com	r25
 33c:	81 95       	neg	r24
 33e:	9f 4f       	sbci	r25, 0xFF	; 255
 340:	01 c0       	rjmp	.+2      	; 0x344 <__utoa_common>

00000342 <__utoa_ncheck>:
 342:	bb 27       	eor	r27, r27

00000344 <__utoa_common>:
 344:	fb 01       	movw	r30, r22
 346:	55 27       	eor	r21, r21
 348:	aa 27       	eor	r26, r26
 34a:	88 0f       	add	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	aa 1f       	adc	r26, r26
 350:	a4 17       	cp	r26, r20
 352:	10 f0       	brcs	.+4      	; 0x358 <__utoa_common+0x14>
 354:	a4 1b       	sub	r26, r20
 356:	83 95       	inc	r24
 358:	50 51       	subi	r21, 0x10	; 16
 35a:	b9 f7       	brne	.-18     	; 0x34a <__utoa_common+0x6>
 35c:	a0 5d       	subi	r26, 0xD0	; 208
 35e:	aa 33       	cpi	r26, 0x3A	; 58
 360:	08 f0       	brcs	.+2      	; 0x364 <__utoa_common+0x20>
 362:	a9 5d       	subi	r26, 0xD9	; 217
 364:	a1 93       	st	Z+, r26
 366:	00 97       	sbiw	r24, 0x00	; 0
 368:	79 f7       	brne	.-34     	; 0x348 <__utoa_common+0x4>
 36a:	b1 11       	cpse	r27, r1
 36c:	b1 93       	st	Z+, r27
 36e:	11 92       	st	Z+, r1
 370:	cb 01       	movw	r24, r22
 372:	00 c0       	rjmp	.+0      	; 0x374 <strrev>

00000374 <strrev>:
 374:	dc 01       	movw	r26, r24
 376:	fc 01       	movw	r30, r24
 378:	67 2f       	mov	r22, r23
 37a:	71 91       	ld	r23, Z+
 37c:	77 23       	and	r23, r23
 37e:	e1 f7       	brne	.-8      	; 0x378 <strrev+0x4>
 380:	32 97       	sbiw	r30, 0x02	; 2
 382:	04 c0       	rjmp	.+8      	; 0x38c <strrev+0x18>
 384:	7c 91       	ld	r23, X
 386:	6d 93       	st	X+, r22
 388:	70 83       	st	Z, r23
 38a:	62 91       	ld	r22, -Z
 38c:	ae 17       	cp	r26, r30
 38e:	bf 07       	cpc	r27, r31
 390:	c8 f3       	brcs	.-14     	; 0x384 <strrev+0x10>
 392:	08 95       	ret

00000394 <_exit>:
 394:	f8 94       	cli

00000396 <__stop_program>:
 396:	ff cf       	rjmp	.-2      	; 0x396 <__stop_program>
